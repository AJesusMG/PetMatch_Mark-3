generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  
}

// model User {
//   id    String  @id @default(auto()) @map("_id") @db.ObjectId
//   email String  @unique
//   name  String?
// }

model user {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  fullname     String?
  username     String?   
  isAdmin      Boolean     @default(false)
  email        String      @unique @db.String
  phoneNumber  String?
  bio          String?
  instagramUrl String?
  facebookUrl  String?
  photoUrl     String?
  community    community[]
  comments     comment[] @relation("UserComments")
  reports      reports[]
  survey       survey?
  posts        posts[]      
}

model animals {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  age           Float
  size          Float
  training      Float
  specie        String
  breed         String
  color         String? 
  temperament   Float 
  maintenance   Float  
  timeNeeded    Float  
  space_Needed  Float
  weather       Float
  total_plus    Float
  posts        posts?
}


// Checar si en vez de hacer una relacion de muchos a muchos, hacer un atributo enum de colores

model community {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime
  comments  comment[] @relation("CommunityComments")
  userId    String?   @db.ObjectId
  user      user?     @relation(fields: [userId], references: [id])
}

model comment {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  text             String
  createdAt        DateTime  @default(now())
  communityId      String?   @db.ObjectId
  userId           String?   @db.ObjectId
  parentId         String?   @db.ObjectId

  user             user?     @relation("UserComments", fields: [userId], references: [id])
  community        community? @relation("CommunityComments", fields: [communityId], references: [id])
  
  parentComment    comment?   @relation("CommentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childrenComments comment[]  @relation("CommentChildren")
}


model reports {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userEmail String? @db.String @map("_userEmail")
  postId String? @db.ObjectId

  user user?  @relation(fields: [userEmail], references: [email])
  post posts? @relation(fields: [postId], references: [id])
}

model posts {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  adopted     Boolean     @default(false)
  description String      
  active      Boolean
  craetedAt   DateTime
  urlImage   String?
  animalId    String?     @unique @db.ObjectId
  userEmail   String      @db.String @map("_userEmail") // Hacer obligatorio
  user        user        @relation(fields: [userEmail], references: [email])
  animal      animals?    @relation(fields: [animalId], references: [id])
  reports     reports[]
  deletedPosts deletedPosts[]
}


model deletedPosts {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  postId  String? @db.ObjectId
  adminId String? @db.ObjectId

  posts posts?  @relation(fields: [postId], references: [id])
  admin admins? @relation(fields: [adminId], references: [id])
}

model admins {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  username     String         @unique
  password     String
  deletedPosts deletedPosts[]
}

model survey {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  R_age         Float
  R_size        Float
  R_species     String[]
  R_breed       String[]
  R_space       Float
  R_weather     Float
  R_color       String[]
  R_temperament Float
  R_cost        Float
  R_time        Float
  R_training    Float
  total_plus    Float

  userEmail String? @unique @db.String
  user   user?   @relation(fields: [userEmail], references: [email])
}

// model User {
//   id           Int             @id @default(autoincrement())
//   firstName    String
//   lastName     String
//   email        String          @unique
//   password     String
//   phone        String
//   instagramUrl String
//   facebookUrl  String
//   imageUrl     String
//   posts        Post[]
//   communities  Community[]
//   comments     Comment[]
//   reports      Report[]
// }

// model Post {
//   id            Int             @id @default(autoincrement())
//   adopted       Boolean
//   description   String
//   active        Boolean
//   createdAt     DateTime
//   animalId      Int
//   userId        Int
//   imageUrl      String
//   user          User            @relation(fields: [userId], references: [id])
//   animal        Animal          @relation(fields: [animalId], references: [id])
//   reports       Report[]
//   deletedPosts  DeletedPost[]
// }

// model Community {
//   id            Int             @id @default(autoincrement())
//   text          String
//   createdAt     DateTime
//   userId        Int
//   user          User            @relation(fields: [userId], references: [id])
//   comments      Comment[]
// }

// model Comment {
//   id            Int             @id @default(autoincrement())
//   text          String
//   createdAt     DateTime
//   communityId   Int
//   userId        Int
//   community     Community       @relation(fields: [communityId], references: [id])
//   user          User            @relation(fields: [userId], references: [id])
// }

// model Report {
//   id            Int             @id @default(autoincrement())
//   userId        Int
//   postId        Int
//   user          User            @relation(fields: [userId], references: [id])
//   post          Post            @relation(fields: [postId], references: [id])
// }

// model Animal {
//   id              Int              @id @default(autoincrement())
//   name            String
//   age             Int
//   size            Float
//   origin          String
//   exotic          Boolean
//   typeId          Int
//   colorId         Int
//   patternId       Int
//   type            AnimalType       @relation(fields: [typeId], references: [id])
//   color           Color            @relation(fields: [colorId], references: [id])
//   pattern         Pattern          @relation(fields: [patternId], references: [id])
//   personalities   AnimalPersonality[]
//   tendencies      AnimalTendency[]
// }

// model AnimalType {
//   id             Int              @id @default(autoincrement())
//   type           String
//   animals        Animal[]
//   breeds         Breed[]
// }

// model Breed {
//   id             Int              @id @default(autoincrement())
//   breed          String
//   typeId         Int
//   habitatId      Int
//   type           AnimalType       @relation(fields: [typeId], references: [id])
//   habitat        Habitat          @relation(fields: [habitatId], references: [id])
// }

// model Habitat {
//   id             Int              @id @default(autoincrement())
//   habitat        String
//   breeds         Breed[]
// }

// model Tendency {
//   id             Int              @id @default(autoincrement())
//   tendency       String
//   animalTendencies AnimalTendency[]
// }

// model Personality {
//   id             Int              @id @default(autoincrement())
//   personality    String
//   animalPersonalities AnimalPersonality[]
// }

// model Pattern {
//   id             Int              @id @default(autoincrement())
//   pattern        String
//   animals        Animal[]
// }

// model AnimalPersonality {
//   personalityId  Int
//   animalId       Int
//   personality    Personality       @relation(fields: [personalityId], references: [id])
//   animal         Animal            @relation(fields: [animalId], references: [id])
//   @@id([personalityId, animalId])
// }

// model AnimalTendency {
//   tendencyId     Int
//   animalId       Int
//   tendency       Tendency          @relation(fields: [tendencyId], references: [id])
//   animal         Animal            @relation(fields: [animalId], references: [id])
//   @@id([tendencyId, animalId])
// }

// model Color {
//   id             Int              @id @default(autoincrement())
//   color          String
//   animals        Animal[]
// }

// model Admin {
//   id             Int              @id @default(autoincrement())
//   username       String
//   password       String
//   deletedPosts   DeletedPost[]
// }

// model DeletedPost {
//   id             Int              @id @default(autoincrement())
//   adminId        Int
//   postId         Int
//   admin          Admin            @relation(fields: [adminId], references: [id])
//   post           Post             @relation(fields: [postId], references: [id])
// }
